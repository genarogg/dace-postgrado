
# Configuración de Nixpacks para Laravel con Filament

# Proveedores - deben ser una lista, no un mapa
providers = ["php", "node"]

[variables]
# Configurar versiones específicas
PHP_VERSION = "8.2"
NODE_VERSION = "20"

# Variables de aplicación
APP_NAME = "DACE UNERG POSTGRADO"
APP_ENV = "production"
APP_DEBUG = "false"
APP_KEY = "base64:Gv0sGAfgv+zGVuH+ajk0PDpHp7SXVke50GTG3JWUNv0="
APP_URL = "https://your-app-domain.com"

# Configuración de idioma
APP_LOCALE = "es"
APP_FALLBACK_LOCALE = "es"
APP_FAKER_LOCALE = "es_ES"

# Configuración de mantenimiento
APP_MAINTENANCE_DRIVER = "file"

# Configuración de PHP
PHP_CLI_SERVER_WORKERS = "4"
BCRYPT_ROUNDS = "12"

# Configuración de logs
LOG_CHANNEL = "stderr"
LOG_STACK = "single"
LOG_DEPRECATIONS_CHANNEL = "null"
LOG_LEVEL = "error"
LOG_STDERR_FORMATTER = "Monolog\\Formatter\\JsonFormatter"

# Configuración de base de datos (usando SQLite para simplicidad en producción)
DB_CONNECTION = "sqlite"
DB_DATABASE = "/app/database/database.sqlite"

# Configuración de sesión
SESSION_DRIVER = "database"
SESSION_LIFETIME = "120"
SESSION_ENCRYPT = "false"
SESSION_PATH = "/"
SESSION_DOMAIN = "null"

# Configuración de broadcasting y filesystem
BROADCAST_CONNECTION = "log"
FILESYSTEM_DISK = "local"
QUEUE_CONNECTION = "database"

# Configuración de cache
CACHE_STORE = "database"

# Configuración de Redis (opcional, comentado para simplicidad)
# REDIS_CLIENT = "phpredis"
# REDIS_HOST = "127.0.0.1"
# REDIS_PASSWORD = "null"
# REDIS_PORT = "6379"

# Configuración de correo
MAIL_MAILER = "log"
MAIL_SCHEME = "null"
MAIL_HOST = "127.0.0.1"
MAIL_PORT = "2525"
MAIL_USERNAME = "null"
MAIL_PASSWORD = "null"
MAIL_FROM_ADDRESS = "hello@example.com"
MAIL_FROM_NAME = "${APP_NAME}"

# Configuración de AWS (vacías por defecto)
AWS_ACCESS_KEY_ID = ""
AWS_SECRET_ACCESS_KEY = ""
AWS_DEFAULT_REGION = "us-east-1"
AWS_BUCKET = ""
AWS_USE_PATH_STYLE_ENDPOINT = "false"

# Configuración específica para Filament
FILAMENT_FILESYSTEM_DISK = "local"

# Optimizaciones de PHP para producción
PHP_MEMORY_LIMIT = "512M"
PHP_MAX_EXECUTION_TIME = "300"
PHP_UPLOAD_MAX_FILESIZE = "64M"
PHP_POST_MAX_SIZE = "64M"

# Configuración específica para Vite
VITE_APP_NAME = "${APP_NAME}"

[phases.setup]
nixPkgs = [
  "...",
  "nginx",
  "curl",
  "unzip",
  "git",
  "sqlite"
]

# Extensiones de PHP requeridas
aptPkgs = [
  "php8.2-ctype",
  "php8.2-curl", 
  "php8.2-dom",
  "php8.2-fileinfo",
  "php8.2-filter",
  "php8.2-hash",
  "php8.2-mbstring",
  "php8.2-openssl",
  "php8.2-pcre",
  "php8.2-pdo",
  "php8.2-pdo-sqlite",
  "php8.2-session",
  "php8.2-tokenizer",
  "php8.2-xml",
  "php8.2-zip",
  "php8.2-gd",
  "php8.2-intl",
  "php8.2-bcmath"
]

[phases.install]
dependsOn = ["setup"]
cmds = [
  # Instalar dependencias de PHP
  "composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist",
  
  # Instalar dependencias de Node.js (incluyendo devDependencies para build)
  "npm ci"
]

[phases.build]
dependsOn = ["install"]
cmds = [
  # Crear archivo .env si no existe (usando .env.example como base)
  "cp .env.example .env || true",
  
  # Generar key de aplicación
  "php artisan key:generate --force",
  
  # Crear base de datos SQLite si no existe
  "touch database/database.sqlite",
  
  # Construir assets de frontend con Vite ANTES de cachear vistas
  "npm run build",
  
  # Optimizar configuración para producción
  "php artisan config:cache",
  "php artisan route:cache",
  "php artisan view:cache",
  
  # Ejecutar migraciones
  "php artisan migrate --force --no-interaction",
  
  # Crear usuario admin por defecto para Filament Shield
  "php artisan shield:install --fresh --minimal || true",
  
  # Limpiar caches de desarrollo
  "php artisan optimize:clear",
  
  # Limpiar node_modules para reducir tamaño de imagen
  "rm -rf node_modules"
]

[phases.start]
cmd = "php artisan serve --host=0.0.0.0 --port=${PORT:-8000}"

# Archivos estáticos que deben ser servidos
[staticAssets]
"public" = "/"